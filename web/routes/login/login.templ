package login

templ LoginFrag() {
	@LoginFragStyle()
	@LoginFragJS()
	<div class="login-frag">
		<h1>Login</h1>
		<form hx-post="/login/submit" hx-target="#login-response" hx-swap="outerHTML">
			<div class="pin-container">
				<input type="hidden" id="pin-code" name="pin-code" required/>
				<div class="pin-inputs">
					<input type="text" maxlength="1" class="pin-box"/>
					<input type="text" maxlength="1" class="pin-box"/>
					<input type="text" maxlength="1" class="pin-box"/>
					<input type="text" maxlength="1" class="pin-box"/>
				</div>
			</div>
			<button type="submit">Login</button>
		</form>
		<div id="login-response"></div>
	</div>
}

templ LoginFragStyle() {
	<style>
    .login-frag {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        flex-direction: column;
        gap: 1rem;

        .pin-inputs {
            display: flex;
            gap: .5rem;

            input {
                padding: 1rem;
                aspect-ratio: 1 / 1;
                width: 4rem;
                text-align: center;
                border-radius: 0.5rem;
                outline: none;
                border: 2px solid transparent;
                background-color: #374151;
                color: white;
                font-size: 1.5rem;
                transition: all 100ms;

                &:focus {
                    border-color: #006fee;
                }
            }
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 1rem;

            button {
                border: none;
                font-size: 1.5rem;
                transition: all 100ms;
                background: #006fee;
                padding: .5rem;
                border-radius: 0.5rem;
                cursor: pointer;
                color: white;

                &:hover {
                    background: #005bc4;
                }
            }
        }
    }
    </style>
}

templ LoginFragJS() {
	<script>
    document.addEventListener('DOMContentLoaded', function() {
        const pinBoxes = document.querySelectorAll('.pin-box');
        const hiddenInput = document.getElementById('pin-code');

        const updateHiddenInput = () => {
            hiddenInput.value = Array.from(pinBoxes).map(input => input.value).join('');
        };

        pinBoxes.forEach((box, index) => {
            // Handle input event for typing in each box
            box.addEventListener('input', () => {
                if (box.value.length === 1 && index < pinBoxes.length - 1) {
                    pinBoxes[index + 1].focus();
                }
                // Update hidden input value after any change
                updateHiddenInput();
            });

            // Handle backspace key for deleting and moving focus
            box.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && box.value === '' && index > 0) {
                    pinBoxes[index - 1].focus();
                }

                // Update hidden input value even when backspace is pressed
                setTimeout(updateHiddenInput, 0); // Use setTimeout to wait until after the key press is processed
            });

            // Set focus on the first input box when the page loads
            if (index === 0) {
                box.focus();
            }
        });
    });
    </script>
}
