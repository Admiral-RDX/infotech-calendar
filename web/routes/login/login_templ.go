// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package login

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func LoginFrag() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = LoginFragStyle().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = LoginFragJS().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"login-frag\"><h1>Login</h1><form hx-post=\"/login/submit\" hx-target=\"#login-response\" hx-swap=\"outerHTML\"><div class=\"pin-container\"><input type=\"hidden\" id=\"pin-code\" name=\"pin-code\" required><div class=\"pin-inputs\"><input type=\"text\" maxlength=\"1\" class=\"pin-box\"> <input type=\"text\" maxlength=\"1\" class=\"pin-box\"> <input type=\"text\" maxlength=\"1\" class=\"pin-box\"> <input type=\"text\" maxlength=\"1\" class=\"pin-box\"></div></div><button type=\"submit\">Login</button></form><div id=\"login-response\"></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func LoginFragStyle() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>\n    .login-frag {\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n\n        .pin-inputs {\n            display: flex;\n            gap: .5rem;\n\n            input {\n                padding: 1rem;\n                aspect-ratio: 1 / 1;\n                width: 4rem;\n                text-align: center;\n                border-radius: 0.5rem;\n                outline: none;\n                border: 2px solid transparent;\n                background-color: #374151;\n                color: white;\n                font-size: 1.5rem;\n                transition: all 100ms;\n\n                &:focus {\n                    border-color: #006fee;\n                }\n            }\n        }\n\n        form {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n\n            button {\n                border: none;\n                font-size: 1.5rem;\n                transition: all 100ms;\n                background: #006fee;\n                padding: .5rem;\n                border-radius: 0.5rem;\n                cursor: pointer;\n                color: white;\n\n                &:hover {\n                    background: #005bc4;\n                }\n            }\n        }\n    }\n    </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func LoginFragJS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n    document.addEventListener('DOMContentLoaded', function() {\n        const pinBoxes = document.querySelectorAll('.pin-box');\n        const hiddenInput = document.getElementById('pin-code');\n\n        const updateHiddenInput = () => {\n            hiddenInput.value = Array.from(pinBoxes).map(input => input.value).join('');\n        };\n\n        pinBoxes.forEach((box, index) => {\n            // Handle input event for typing in each box\n            box.addEventListener('input', () => {\n                if (box.value.length === 1 && index < pinBoxes.length - 1) {\n                    pinBoxes[index + 1].focus();\n                }\n                // Update hidden input value after any change\n                updateHiddenInput();\n            });\n\n            // Handle backspace key for deleting and moving focus\n            box.addEventListener('keydown', (e) => {\n                if (e.key === 'Backspace' && box.value === '' && index > 0) {\n                    pinBoxes[index - 1].focus();\n                }\n\n                // Update hidden input value even when backspace is pressed\n                setTimeout(updateHiddenInput, 0); // Use setTimeout to wait until after the key press is processed\n            });\n\n            // Set focus on the first input box when the page loads\n            if (index === 0) {\n                box.focus();\n            }\n        });\n    });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
